// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgBurnCoin } from "./types/ysip/tx";
import { MsgMintCoin } from "./types/ysip/tx";


export { MsgBurnCoin, MsgMintCoin };

type sendMsgBurnCoinParams = {
  value: MsgBurnCoin,
  fee?: StdFee,
  memo?: string
};

type sendMsgMintCoinParams = {
  value: MsgMintCoin,
  fee?: StdFee,
  memo?: string
};


type msgBurnCoinParams = {
  value: MsgBurnCoin,
};

type msgMintCoinParams = {
  value: MsgMintCoin,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgBurnCoin({ value, fee, memo }: sendMsgBurnCoinParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBurnCoin: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBurnCoin({ value: MsgBurnCoin.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBurnCoin: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgMintCoin({ value, fee, memo }: sendMsgMintCoinParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgMintCoin: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgMintCoin({ value: MsgMintCoin.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgMintCoin: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgBurnCoin({ value }: msgBurnCoinParams): EncodeObject {
			try {
				return { typeUrl: "/ysip.ysip.MsgBurnCoin", value: MsgBurnCoin.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBurnCoin: Could not create message: ' + e.message)
			}
		},
		
		msgMintCoin({ value }: msgMintCoinParams): EncodeObject {
			try {
				return { typeUrl: "/ysip.ysip.MsgMintCoin", value: MsgMintCoin.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgMintCoin: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			YsipYsip: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;